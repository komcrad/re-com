name: cd
on: [push]

jobs:
  test:
    name: Test
    runs-on: ubuntu-18.04
    container:
      # Ref: https://github.community/t5/GitHub-Actions/docker-pull-from-public-GitHub-Package-Registry-fail-with-quot/m-p/32782
      image: superstructor/clojure:openjdk-11-lein-2.9.1-node-browsers
    steps:
      - uses: actions/checkout@v1
      - name: Maven cache
        id: maven-cache
        uses: actions/cache@v1
        with:
          path: /root/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/project.clj') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: npm cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('project.clj') }}-${{ hashFiles('**/deps.cljs') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: shadow-cljs compiler cache
        uses: actions/cache@v1
        with:
          path: .shadow-cljs
          key: ${{ runner.os }}-shadow-cljs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-shadow-cljs-
      - if: steps.maven-cache.outputs.cache-hit != 'true'
        run: lein ci
      - if: steps.maven-cache.outputs.cache-hit == 'true'
        run: lein -o ci
      - name: Slack notification
        uses: homoluctus/slatify@v2.0.1
        if: failure() || cancelled()
        with:
          type: ${{ job.status }}
          job_name: re-com Tests
          channel: '#oss-robots'
          url: ${{ secrets.SLACK_WEBHOOK }}
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
  release:
    name: Release
    needs: test
    runs-on: ubuntu-18.04
    #container:
    #  # Ref: https://github.community/t5/GitHub-Actions/docker-pull-from-public-GitHub-Package-Registry-fail-with-quot/m-p/32782
    #  image: superstructor/clojure:openjdk-11-lein-2.9.1-node-browsers
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v1
      - name: Maven cache
        id: maven-cache
        uses: actions/cache@v1
        with:
          path: /root/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/project.clj') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Setup tmake session
        uses: mxschmitt/action-tmate@v2
      - name: Run lein release
        if: steps.maven-cache.outputs.cache-hit != 'true'
        run: |
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} CLOJARS_USERNAME=${{ secrets.CLOJARS_USERNAME }} CLOJARS_TOKEN=${{ secrets.CLOJARS_TOKEN }} GITHUB_USERNAME=${{ github.actor }} GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} lein release
      - name: Run lein -o release
        if: steps.maven-cache.outputs.cache-hit == 'true'
        run: |
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} CLOJARS_USERNAME=${{ secrets.CLOJARS_USERNAME }} CLOJARS_TOKEN=${{ secrets.CLOJARS_TOKEN }} GITHUB_USERNAME=${{ github.actor }} GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} lein -o release
      # This creates a 'GitHub Release' from the tag and includes link to CHANGELOG.md at the current
      # git ref. We do not use draft or prerelease features as we always want
      # the latest release to show in the right hand column of the project page regardless
      # of if it is a stable release.
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            [Changelog](https://github.com/day8/re-com/blob/${{ github.ref }}/CHANGELOG.md)
          draft: false
          prerelease: false
      - name: Slack notification
        uses: homoluctus/slatify@v2.0.1
        if: always()
        with:
          type: ${{ job.status }}
          job_name: re-com Deployment
          channel: '#oss-robots'
          url: ${{ secrets.SLACK_WEBHOOK }}
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
